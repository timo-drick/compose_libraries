uniform float2 iResolution;
uniform float iTime;
layout(color) uniform float4 fg;
uniform float3 iLightDir;
uniform shader texture;

//const float4 fg = float4(0.6392156862745098,0.7686274509803922,0.2235294117647059,1.0);
const float4 bg = float4(0);

const int MAX_STEPS = 100;
const float MAX_DIST = 50.;
const float SURF_DIST = .01;

const float TAU = 6.283185;
const float PI = 3.141592;

//vec3 lightDir = iLightDir;

mat2 Rot(float a) {
    float s=sin(a), c=cos(a);
    return mat2(c, -s, s, c);
}

float4 getBodyColor(float2 uv) {
    return texture.eval(uv).rgb1;
    float3 color = float3(1, 0, 0);
    float base = uv.x / PI / 2.0;
    base *= 10.0;
    color.gr *= Rot(floor(base) * PI * 2.0 * .1);
    return float4(color, 1.0);
}

float4 getColor(int index, float2 uv) {
    switch (index) {
        case 0: return float4(0.3, 0.3, 0.3, 1.0);    // Background
        case 1: return getBodyColor(uv);         // Body
        case 2: return float4(0.05, 0.05, 0.05, 1.0); // Eyes
    }
    return float4(0);
}

float getSpec(int index) {
    switch (index) {
        case 0: return 0.0;  // Background
        case 1: return 0.2; // Body
        case 2: return 0.8; // Eyes
    }
    return 0.0;
}

struct Material {
    float dist; // distance to eye
    float2 uv;  // Texture mapping
    int index;  // Material index
};

Material mixMaterial(Material a, Material b) {
    if (a.dist > b.dist) return b;
    else return a;
}

float smin(float a, float b, float k) {
    float h = clamp(0.5+0.5*(b-a)/k, 0., 1.);
    return mix(b, a, h) - k*h*(1.-h);
}


float opSmoothUnion( float d1, float d2, float k ) {
    float h = clamp( 0.5 + 0.5*(d2-d1)/k, 0.0, 1.0 );
    return mix( d2, d1, h ) - k*h*(1.0-h);
}

float opSmoothSubtraction( float d1, float d2, float k ) {
    float h = clamp( 0.5 - 0.5*(d2+d1)/k, 0.0, 1.0 );
    return mix( d2, -d1, h ) + k*h*(1.0-h);
}

float opSmoothIntersection( float d1, float d2, float k ) {
    float h = clamp( 0.5 - 0.5*(d2-d1)/k, 0.0, 1.0 );
    return mix( d2, d1, h ) + k*h*(1.0-h);
}

float sdSphere(vec3 p, float s) {
    return length(p)-s;
}
float sdCapsule(vec3 p, vec3 a, vec3 b, float r) {
    vec3 pa = p - a, ba = b - a;
    float h = clamp( dot(pa,ba)/dot(ba,ba), 0.0, 1.0 );
    return length( pa - ba*h ) - r;
}

float sdVerticalCapsule( vec3 p, float h, float r ) {
    p.y -= clamp( p.y, 0.0, h );
    return length( p ) - r;
}

float sdCappedCylinder(vec3 p, float h, float r) {
    vec2 d = abs(vec2(length(p.xz),p.y)) - vec2(r,h);
    return min(max(d.x,d.y),0.0) + length(max(d,0.0));
}

float sdHead(vec3 p) {
    p.y *= 1.12;
    float halfSphere = opSmoothIntersection(sdSphere(p, 1.0), -p.y, 0.05); // head sphere
    // Antennas
    vec3 antennaDir = vec3(0, 1, 0);
    antennaDir.xy *= Rot(-PI * .347 * .5);
    p.x = abs(p.x); // mirror x-axe
    float antenna = sdCapsule(p, antennaDir * 1.0, antennaDir * 1.4, 0.1);
    float d = opSmoothUnion(antenna, halfSphere, 0.02);
    return d;
}

float sdEyes(vec3 p) {
    vec3 pos = vec3(0,1,0);
    pos.yz *= Rot(PI * .39);
    pos.xz *= Rot(-PI * .15);
    pos *= 0.95;
    p.x = abs(p.x);
    p -= pos;
    return sdSphere(p, 0.1);
}

float sdTorso(vec3 p) {
    p.y += 0.65;
    return opSmoothIntersection(sdVerticalCapsule(p, 1.0, 1.0), p.y - .6, 0.05);
}

float sdLegs(vec3 p) {
    p.x = abs(p.x);
    p.y += 1.65;
    p.x -= 0.33;
    return sdCappedCylinder(p, 0.5, 0.25);
}

float sdArms(vec3 p) {
    //p.yz *= Rot(PI * 0.5 * iTime * sign(p.x));
    p.x = abs(p.x);
    p.y += 1.0;
    float h = 0.7;
    float y = clamp(p.y, 0.0, h);
    float radius = sqrt(1.0-y) * 0.1 + 0.08;
    p.x -= 1.1 + (1.0-y*y) * 0.15;

    p.y -= y; // Vertical
    return length(p) - radius; // capsule
}

Material GetDist(float3 p) {
    Material background = Material(p.z + 2.0, float2(0), 0);
    p.yz *= Rot(-PI * 0.4);
    float angle = abs(PI * 2.0 * (iTime - .5)) + PI / 4.0 * 1.5;
    //float angle = PI * 1;
    p.xz *= Rot(angle);

    float bodyD = min(sdHead(p), sdTorso(p));
    bodyD = opSmoothUnion(bodyD, sdLegs(p), .08);
    bodyD = opSmoothUnion(bodyD, sdArms(p), .02);
    float2 uv = float2(atan(p.x, p.z), p.y);
    Material greenBody = Material(bodyD, p.xy / 2.0, 1);
    Material eye = Material(sdEyes(p), float2(0), 2);
    Material mat = mixMaterial(greenBody, eye);
    background = mixMaterial(background, mat);

    return background;
}

Material RayMarch(vec3 ro, vec3 rd) {
    float dO=0.;
    Material m = Material(0., float2(0), 0);
    for(int i=0; i<MAX_STEPS; i++) {
        vec3 p = ro + rd*dO;
        m = GetDist(p);
        float dS = m.dist;
        dO += dS;
        if(dO>MAX_DIST) return Material(MAX_DIST, float2(0), 0);
        m.dist = dO;
        if(abs(dS)<SURF_DIST) break;
    }

    return m;
}

vec3 GetNormal(vec3 p) {
    vec2 e = vec2(.001, 0);
    vec3 n = GetDist(p).dist - vec3(GetDist(p-e.xyy).dist, GetDist(p-e.yxy).dist,GetDist(p-e.yyx).dist);
    return normalize(n);
}

vec3 GetRayDir(vec2 uv, vec3 p, vec3 l, float z) {
    vec3
    f = normalize(l-p),
    r = normalize(cross(vec3(0,1,0), f)),
    u = cross(f,r),
    c = f*z,
    i = c + uv.x*r + uv.y*u;
    return normalize(i);
}

float calcShadow(vec3 p, vec3 lightPos, float sharpness) {
    vec3 rd = normalize(lightPos - p);
    float h;
    float minH = 1.0;
    float d = 0.1;
    for (int i = 0; i < 16; i++) {
        h = GetDist(p + rd * d).dist;
        minH = abs(h / d);
        if (minH < 0.01)
        return 0.0;
        d += h;
    }
    return minH * sharpness;
}

float calcOcc(vec3 p, vec3 n, float strength) {
    const float dist = 0.2;
    return 1.0 - (dist - GetDist(p + n * dist).dist) * strength;
}

// https://iquilezles.org/articles/rmshadows
float calcSoftshadow( in vec3 ro, in vec3 rd, in float mint, in float tmax ) {
    // bounding volume
    float tp = (0.8-ro.y)/rd.y; if( tp>0.0 ) tmax = min( tmax, tp );

    float res = 1.0;
    float t = mint;
    for( int i=0; i<24; i++ ) {
        float h = GetDist( ro + rd*t ).dist;
        float s = clamp(8.0*h/t,0.0,1.0);
        res = min( res, s );
        t += clamp( h, 0.01, 0.2 );
        if( res<0.004 || t>tmax ) break;
    }
    res = clamp( res, 0.0, 1.0 );
    return res*res*(3.0-2.0*res);
}

// https://iquilezles.org/articles/nvscene2008/rwwtt.pdf
float calcAO( in vec3 pos, in vec3 nor ) {
    float occ = 0.0;
    float sca = 1.0;
    for( int i=0; i<5; i++ )
    {
        float h = 0.01 + 0.12*float(i)/4.0;
        float d = GetDist( pos + h*nor ).dist;
        occ += (h-d)*sca;
        sca *= 0.95;
        if( occ>0.35 ) break;
    }
    return clamp( 1.0 - 3.0*occ, 0.0, 1.0 ) * (0.5+0.5*nor.y);
}

vec4 renderScene(vec2 uv) {
    //vec3 ro = vec3(0, 3, -3)*.7;
    vec3 ro = vec3(0, 8, -3)*.5;

    vec3 rd = GetRayDir(uv, ro, vec3(0, 0, 0), 2.0);
    vec3 col = vec3(0);

    Material mat = RayMarch(ro, rd);
    float d = mat.dist;
    float alpha;
    if(d<MAX_DIST) {
        alpha = 1.;
        vec3 p = ro + rd * d;
        vec3 n = GetNormal(p);

        //vec3 lightPos = vec3(-1.0, 1.0, 2.0)*20.;
        vec3 lightPos = normalize(vec3(-1.0, 1.0, 1.5))*150.;
        vec3 lightCol = vec3(1.0, 0.9, 0.8) * 7.0;
        vec3 lightToPoint = normalize(lightPos - p);
        vec3 skyCol = bg.rgb;
        float sha = calcShadow(p, lightPos, 1.0);
        //float sha = calcSoftshadow(p, normalize(lightPos - p), 0.02, 2.5);
        float occ = calcOcc(p, n, 4.0);
        //float occ = calcAO(p, n);
        float spe = pow(max(0.0, dot(rd, reflect(lightToPoint, n))), 40.0);
        float mainLight = max(0.0, dot(n, lightToPoint));
        float backLight = clamp(dot(n, -rd), 0.01, 1.0) * 0.1;
        vec3 skyLight = clamp(dot(n, vec3(0.0, 1.0, 0.0)), 0.01, 1.0) * 0.4 * skyCol;
        float fog = 1.0 - exp(-d * 0.03);


        col = (mainLight * sha + (spe + backLight) * occ) * lightCol;
        col += skyLight * occ;
        col *= getColor(mat.index, mat.uv).rgb * 0.2;
        col = mix(col, skyCol, fog);
        float t = 2.;
        col = mix( col, vec3(0.7,0.7,0.9), 1.0-exp( -0.0001*t*t*t ) );
    } else {
        alpha = 0.;
    }

    col = pow(col, vec3(.45));    // gamma correction

    return vec4(col * alpha, alpha);
}

vec4 main(vec2 fragCoord) {
    fragCoord = fragCoord / iResolution * 2.0 - 1.0;
    float aspect = iResolution.y / iResolution.x; // aspect ratio
    if (aspect > 1.0) { // landscape mode?
        fragCoord.y *= aspect;
    } else {
        fragCoord.x /= aspect;
    }
    fragCoord.y = -fragCoord.y;
    vec4 col = renderScene(fragCoord);
    return col;//vec4(col.rgb * col.a,  col.a); // premultiply alpha
}

